using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Synthesis.Settings;

namespace ArmorEdidExporter
    {
    public class Settings
        {
        [SynthesisTooltip("Export the Armor EDID list formatted in CS")]
        public bool Formatednames { get; set; } = true;

        [SynthesisTooltip("Export the Armor EDID list in plain text")]
        public bool Plaintxtout { get; set; } = true;

        [SynthesisSettingName("Please choose which mods you would like to include in the output.")]
        public HashSet<ModKey> ModsToReadFrom { get; set; } = new HashSet<ModKey>();
        }

    public class Program
        {
        //private
        static Lazy<Settings> _settings = new Lazy<Settings>();
        public static Settings Settings => _settings.Value;
        public static async Task<int> Main(string[] args)
            {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "ArmorEdidExporter.esp")
                .SetAutogeneratedSettings(
                            nickname: "Settings",
                            path: "settings.json",
                            out _settings,
                            true)
                .Run(args);
            }


        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        //private static async Task RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
            {
            HashSet<string> armorEDIDs = new HashSet<string>();

            foreach (var armorGetter in state.LoadOrder.PriorityOrder.Armor().WinningOverrides())
                {
                // Only process mods that are selected in ModsToReadFrom
                if (_settings.Value.ModsToReadFrom.Count > 0 &&
                    !_settings.Value.ModsToReadFrom.Contains(armorGetter.FormKey.ModKey))
                    {
                    continue;
                    }
                if (armorGetter.EditorID == null)
                    continue;

                // skip armor with non-default race
                if (armorGetter.Race != null)
                    {
                    armorGetter.Race.TryResolve<IRaceGetter>(state.LinkCache, out var race);
                    if (race != null && race.EditorID != "DefaultRace") continue;
                    }
                // skip armor that is non-playable or a shield
                if (armorGetter.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)) continue;
                if (armorGetter.MajorFlags.HasFlag(Armor.MajorFlag.Shield)) continue;
                // skip armor that is head, hair, circlet, hands, feet, rings, or amulets
                // Ignore armor with specific body template flags
                if (armorGetter.BodyTemplate != null &&
                    (armorGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Head) ||
                     armorGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Hair) ||
                     armorGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Circlet) ||
                     armorGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Ring) ||
                     armorGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Amulet)))
                    {
                    continue;
                    }

                // Add the EDID to the list
                armorEDIDs.Add(armorGetter.EditorID);
                }

            // Export to the file based on settings
            if (_settings.Value.Formatednames)
                {
                ExportFormattedEDID(armorEDIDs, "FormattedArmorEDID.txt");
                }

            if (_settings.Value.Plaintxtout)
                {
                ExportPlainTextEDID(armorEDIDs, "PlainArmorEDID.txt");
                }
            }

        private static void ExportFormattedEDID(HashSet<string> armorEDIDs, string fileName)
            {
            using (StreamWriter writer = new StreamWriter(fileName))
                {
                foreach (var edid in armorEDIDs)
                    {
                    writer.WriteLine($"if (Settings.kwdSettings.Blank && (StrMatch(name, \"{edid}\")))");
                    }
                }
            }

        private static void ExportPlainTextEDID(HashSet<string> armorEDIDs, string fileName)
            {
            using (StreamWriter writer = new StreamWriter(fileName))
                {
                foreach (var edid in armorEDIDs)
                    {
                    writer.WriteLine(edid);
                    }
                }
            }
        }
    }
